This is a Common Lisp CFFI wrapper for ODE (Open Dynamics Engine) created by
Swig and some clever scripting. I'm getting into game programming and needed
a physics engine to start with. Bullet is very attractive, but the C API is
lacking, and ODE is a well-known, well-performing engine with a very nice API
written in C (a pleasure to wrap in CL).

There are a few things to note. First off, this wrapper may not be complete. In
fact, it changes a few times a week as I make more progress in ODE. Not only 
have I not used ODE before, I have not created my own wrappers for CFFI before.
Secondly, there are some places where I had to modify the headers for ODE 
because Swig was having trouble reading them (specifically, a few functions
with __inline in the declaration). What I do is while generating the bindings,
copy the ODE headers files from the ODE installation prefix into a temporary
folder and make any modifications needed. I then point Swig at the modified
headers. This allows for the ODE source to be updated (heh, not likely) 
without erasing the hacks made to support Swig. I'm also patching a header file
completely because Swig is having trouble with self-referential enums.

Once the bindings are generated (bindings.lisp), the generate.sh script grabs
some values out of them and places them into separate files. One is 
accessors.lisp, and the other exports.lisp. This is generally what's in the most
state of flux...what goes in these two files. Usually I'll be playing with a
new part of the API and notice that I haven't exported the joint-type enums.
I'll add a few lines to generate.sh to move that specific enum into the exports
file. So this keeps growing. It's come to a pretty stable point, but I may
notice more missing pieces.

To generate bindings:
	git clone ...
	cd cl-ode/
	./generate/generate.sh [/ode/install/prefix]

To install:
	git clone ...
	mv cl-ode/ /your/asdf/system/path/

Done. The files currently checked in were generated for ODE 0.11.1. If you want
to generate for a different version, you will most likely have to run the above
script. If using 0.11.1, you can probably just use the included files without
regenerating.

This has been testing on Slackware 64-bit in clisp, SBCL, and Clozure CL and 
Windows 64-bit in Clozure CL, all with ODE 0.11.1 compiled for x86_64.

If you have any problems, feel free to let me know, or better yet, if you come
up with improvements, I can add you to the github project.

Special thanks to Ralith on github for his work on the chipmunk bindings, a lot
of which inspired the way I organize and generate the cl-ode bindings.

Thanks for using!

Andrew Lyon

